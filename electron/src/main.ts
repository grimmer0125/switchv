import { app, BrowserWindow, ipcMain, globalShortcut } from "electron";

import { exec } from 'child_process'
import {TrayGenerator} from './TrayGenerator';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isDebug = process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';


//  http://localhost:3000/main_window
console.log("MAIN_WINDOW_WEBPACK_ENTRY:", MAIN_WINDOW_WEBPACK_ENTRY) 
// undefind 
console.log("MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY:", MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let tray:any = null;
let mainWindow:BrowserWindow = null;
let serverProcess:any; 

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    }

    //  hide window by default
    // show: false,
    // frame: false,
    // fullscreenable: false,
    // resizable: false,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // const isDebug = process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';
  console.log({isDebug})
  if (true){ //isDebug){//!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

/** https://www.electronjs.org/docs/latest/tutorial/ipc */
ipcMain.on('invoke-vscode', (event, path) => {
  console.log("invoke", {event, path});

  tray.tray.setTitle(`XWin(${path?path[path.length-1]:"n"})`);

  // FIXME: win/linux has difference path
  // ref:
  // 1. https://stackoverflow.com/questions/44405523/spawn-child-node-process-from-electron
  // 2. https://stackoverflow.com/questions/62885809/nodejs-child-process-npm-command-not-found
  // 3. https://github.com/electron/fiddle/issues/365#issuecomment-616630874
  // const fullCmd = `code ${command}`
  const fullCmd = `/usr/local/bin/code ${path}`
  exec(fullCmd, (error, stdout, stderr) => { 
    console.log(stdout);
  });
});  

/** 
 * what is the difference between whenReady & .on('ready)???
 */
// app.whenReady().then(() => {
// })
(async ()=>{
  await app.whenReady();

  if (!isDebug) {
    // spwan a procees
    // console.log("launch serer ", __dirname)
    
    // ref: const child = exec(`node ./index.js --config ./config.js ${flags} --json ${timestamp}.json --console none`);
    // TODO: how to use vercel/pkg bundle deb.db in nestjs  ????
    // exec(`${__dirname}/xwin-server-macos`,  {env: {'DATABASE_URL': 'file:dev.db'}}, (error, stdout, stderr) => { 

    // works in development, not test in production but should work
    // exec(`${__dirname}/xwin-server-macos`,  {env: {'DATABASE_URL': 'file:/Users/grimmer/git/xwin/server/prisma/dev.db'}}, (error, stdout, stderr) => { 
    
    // works in production &  development
    // x TODO: close the packaged app seems not close xwin-server-macos? check by command: lsof -i:55688. Development (npm run start) is OK
    //  add close button on tray?
    // NOTE: if it is running smoothly, it will not print any logs. But if it happens to read db error, it will show some logs
    // ~/git/xwin/electron/out/electron-darwin-arm64/electron.app/Contents/Resources/app/.webpack/main   m
    const serverPath = `${__dirname}/../../../`
    serverProcess = exec(`${serverPath}xwin-server-macos`,  {env: {'DATABASE_URL': `file:${serverPath}prisma/dev.db`}}, (error, stdout, stderr) => { 
      // TODO: figure out it why
      console.log("print server log but seems it is never callbacked")
      console.log(error, stderr)      
      console.log(stdout);
    });
  }

  tray = new TrayGenerator(mainWindow);
  tray.createTray();

  // https://www.electronjs.org/docs/latest/tutorial/keyboard-shortcuts#global-shortcuts
  globalShortcut.register('Alt+CommandOrControl+I', () => {
    console.log('Electron loves global shortcuts!')
    tray.toggleWindow();
  })
})();

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

// ref:
// 1. https://stackoverflow.com/questions/36031465/electron-kill-child-process-exec
// 2. https://stackoverflow.com/questions/42141191/electron-and-node-on-windows-kill-a-spawned-process
// Workaround to close all processes / sub-processes after closing the app
// app.once('window-all-closed', app.quit); ? seems not important 
// mainWindow.removeAllListeners('close'); ? seems not important
app.once('before-quit', () => {
  console.log("before quit, kill server process")
  if (serverProcess) {
    serverProcess.kill();
  }
});

app.setLoginItemSettings({
  openAtLogin: true,
});

app.dock.hide();